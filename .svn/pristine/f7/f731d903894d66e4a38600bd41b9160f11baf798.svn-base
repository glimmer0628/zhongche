<template>
  <div class="activity">
    <div class="activeTop">
      <div class="centerContainer">
        <span class="activeNotice" @click="switchNotice()" :class="{'active':notice}">活动通知</span>
        <span class="activeReport" @click="switchReport()" :class="{'active':!notice}">活动报道</span>
      </div>
    </div>
    <div class="scrollWrapper" v-show="notice" v-el:scroll>
      <ul class="activeContainer">
        <li v-for="activeInfo in activeInfos">
          <active-item :activeinfo="activeInfo"></active-item>
        </li>
      </ul>
    </div>
    <div class="scrollWrapper" v-show="!notice" v-el:rescroll>
      <ul class="activeContainer">
        <li class="swiper report">
          <swiper :options="swiperOption" ref="mySwiper">
            <!-- slides -->
            <swiper-slide v-for="swiperItem in swiperArr">
              <div class="swiperContainer">
                <img :src="swiperItem.img_url" alt="">
                <div class="titleContainer">
                  <div class="title">{{ swiperItem.title }}</div>
                </div>
              </div>
            </swiper-slide>
            <!-- Optional controls -->
            <div class="swiper-pagination"  slot="pagination"></div>
          </swiper>
        </li>
        <li class="report" v-for="reportInfo in reportInfos">
          <report-item :reportinfo="reportInfo"></report-item>
        </li>
      </ul>
    </div>
    <div class="loading" v-show="loading">
      <img src="timg.gif" width="80" height="80">
    </div>
    <div v-link="{ path: '/search' }" class="searchContainer">
      <search></search>
    </div>
  </div>
</template>
<script type="text/javascript">
import activeItem from '../ActiveItem/ActiveItem.vue';
import search from '../Search/Search.vue';
import BScroll from 'better-scroll';
import reportItem from '../ReportItem/ReportItem.vue';
import { swiper, swiperSlide } from 'vue-awesome-swiper';

export default{
  data () {
    return {
      activeInfos: [],
      reportInfos: [],
      swiperArr: [],
      loading: false,
      notice: true,
      scroll: {},
      swiperOption: {
        // NotNextTick is a component's own property, and if notNextTick is set to true, the component will not instantiate the swiper through NextTick, which means you can get the swiper object the first time (if you need to use the get swiper object to do what Things, then this property must be true)
        // notNextTick是一个组件自有属性，如果notNextTick设置为true，组件则不会通过NextTick来实例化swiper，也就意味着你可以在第一时间获取到swiper对象，假如你需要刚加载遍使用获取swiper对象来做什么事，那么这个属性一定要是true
        // notNextTick: true,
        // swiper configs 所有的配置同swiper官方api配置
        autoplay: 3000,
        loop: true,
        grabCursor: true,
        setWrapperSize: true,
        pagination: '.swiper-pagination',
        paginationClickable: true,
        mousewheelControl: true,
        observeParents: true,
        // if you need use plugins in the swiper, you can config in here like this
        // 如果自行设计了插件，那么插件的一些配置相关参数，也应该出现在这个对象中，如下debugger
        debugger: true,
        // swiper callbacks
        // swiper的各种回调函数也可以出现在这个对象中，和swiper官方一样
        onTransitionStart (swiper) {
          console.log(swiper);
        }
        // more Swiper configs and callbacks...
        // ...
      }
    };
  },
  vuex: {
    getters: {
      prefix: ({ user }) => user.prefix,
      openid: ({ user }) => user.userInfo.openid
    }
  },
  methods: {
    switchNotice () {
      this.loading = true;
      this.notice = true;
      this.$http.get(this.prefix + '/activeinfo', {openid: this.openid})
      .then(res => {
        this.activeInfos = res.body.resData.activeInfo;
        this.$nextTick(() => {
          if (!this.scroll.info) {
            this.scroll.info = new BScroll(this.$els.scroll, {
              probeType: 1,
              click: true
            });
          }
          this.scroll.info.refresh();
          this.loading = false;
        });
      });
    },
    switchReport () {
      this.loading = true;
      this.notice = false;
      this.$http.get(this.prefix + '/actreport')
      .then(res => {
        this.reportInfos = res.body.resData.actreport;
        this.swiperArr = res.body.resData.swiperArr;
        this.$nextTick(() => {
          if (!this.scroll.report) {
            this.scroll.report = new BScroll(this.$els.rescroll, {
              probeType: 1,
              click: true
            });
          }
          this.scroll.report.refresh();
          this.loading = false;
        });
      });
    }
  },
  created () {
    // activity info
    this.loading = true;
    this.$http.get(this.prefix + '/activeinfo', {openid: this.openid})
    .then(res => {
      this.activeInfos = res.body.resData.activeInfo;
      this.$nextTick(() => {
        this.scroll.info = new BScroll(this.$els.scroll, {
          probeType: 1,
          click: true
        });
        this.scroll.info.refresh();
        this.loading = false;
        this.scroll.info.on('scroll', (pos) => {
          if (pos.y > 20) {
            this.loading = true;
            this.$http.get(this.prefix + '/activeinfo', {openid: this.openid})
            .then(res => {
              setTimeout(() => {
                this.activeInfos = res.body.resData.activeInfo;
                this.scroll.info.refresh();
                this.loading = false;
              }, 1000);
            });
          }
        });
      });
    });
    // activity report
    this.$nextTick(() => {
      this.scroll.report = new BScroll(this.$els.rescroll, {
        probeType: 1,
        click: true
      });
      this.scroll.report.refresh();
      this.scroll.report.on('scroll', (pos) => {
        if (pos.y > 20) {
          this.loading = true;
          this.$http.get(this.prefix + '/actreport')
          .then(res => {
            setTimeout(() => {
              this.reportInfos = res.body.resData.actreport;
              this.scroll.report.refresh();
              this.loading = false;
            }, 1000);
          });
        }
      });
    });
  },
  components: {
    activeItem,
    search,
    reportItem,
    swiper,
    swiperSlide
  }
};
</script>
<style lang="stylus">
@import '../../../static/css/border-1px.styl'
.activity
  position: absolute
  top: 0px
  bottom: 89px
  width: 100%
  .activeTop
    display: flex
    justify-content: center
    height: 40px
    width: 100%
    line-height:40px
    border-1px-bot('#ebebeb')
    .activeNotice
      margin-right:53px
      font-size:14px
      color:#323232
    .activeReport
      font-size:14px
      color:#323232
    .active
      font-size:16px
      color:#ef2f48
  .scrollWrapper
    overflow: hidden
    height: 100%
    background-color: #f0f0f5
    .activeContainer
      margin: 0
      padding: 0
      li
        font-size: 12px
        list-style: none
        margin-bottom: 10px
        &.report
          margin-bottom: 0
        &.swiper
          width: 100%
          height: 170px
          .swiper-pagination
            padding-right: 12px
            box-sizing: border-box
            text-align: right
          .swiper-pagination-bullet
            background-color: #fff
          .swiper-pagination-bullet-active
            background-color: #fff
            transform: scale(1.3)
          .swiperContainer
            position: relative
            &>img
              width: 100%
              height: 170px
            .titleContainer
              position: absolute
              bottom: 2px
              display: flex
              align-items: center
              padding-left: 12px
              width: 100%
              height: 30px
              color: #fff
              background-color: rgba(0, 0, 0, 0.3)
              .title
                width: 70%
                white-space:nowrap
                overflow:hidden
                text-overflow:ellipsis
  .loading
    position: absolute
    top: 0
    display: flex
    align-items: center
    justify-content: center
    width: 100%
    height: 100%
  .searchContainer
    position: fixed
    bottom: 70px
    right: 30px
</style>